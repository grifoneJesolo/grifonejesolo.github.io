{"version":3,"sources":["grifone_bianco.png","App.js","serviceWorker.js","index.js"],"names":["module","exports","appartamenti","inizio","Date","oggi","App","quantiGiorni","Math","floor","round","abs","length","posizione_in_data","Array","i","pos_riga","className","AppBar","position","style","background","elevation","Toolbar","src","logo","alt","xmlns","viewBox","fill","fill-opacity","d","Grid","container","direction","justify","alignItems","map","righe","index","xs","item","color","margin","appa","class","marginTop","spacing","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.3deb15cf.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/grifone_bianco.5bcb74ff.png\";","import React from 'react';\nimport logo from './grifone_bianco.png';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Grid from '@material-ui/core/Grid';\nimport './App.css';\n\nconst appartamenti = [\n  [403, 401, 402], \n  [406, 404, 405],\n  [\"T3\", \"T1\", \"T2\"],\n  [\"T6\", \"T4\", \"T5\"],\n  [\"T9\", \"T7\", \"T8\"],\n  [103, 101, 102],\n  [106, 104, 105],\n  [109, 107, 108],\n  [203, 202, 201],\n  [206, 204, 205],\n  [209, 207, 208],\n  [303, 301, 302],\n  [306, 304, 305],\n  [\"M9\", 307, 308]\n];\n\nconst oneDay = 24 * 60 * 60 * 1000;\nconst inizio = new Date(2020, 6, 22);\nconst oggi = new Date();\n\nfunction App() {\n  const quantiGiorni = (Math.floor(Math.round(Math.abs((inizio - oggi) / oneDay)) / 3) % appartamenti.length - 1);\n  let posizione_in_data = new Array(appartamenti.length);\n  for (var i = 0; i < posizione_in_data.length; i++) {\n    let pos_riga = (quantiGiorni - 1) % 3;\n    posizione_in_data[(i + quantiGiorni) % appartamenti.length] = [appartamenti[i][pos_riga], appartamenti[i][(pos_riga + 1) % 3], appartamenti[i][(pos_riga + 2) % 3]];\n  }\n  return (\n    <div className=\"App\">\n      <AppBar position=\"static\" style={{ background: '#000b76' }} elevation={0}>\n        <Toolbar>\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        </Toolbar>\n      </AppBar>\n      <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 1000 250\">\n        <path fill=\"#000b76\" fill-opacity=\"1\" d=\"M0,224L30,197.3C60,171,120,117,180,96C240,75,300,85,360,117.3C420,149,480,203,540,224C600,245,660,235,720,208C780,181,840,139,900,144C960,149,1020,203,1080,208C1140,213,1200,171,1260,160C1320,149,1380,171,1410,181.3L1440,192L1440,320L1410,320C1380,320,1320,320,1260,320C1200,320,1140,320,1080,320C1020,320,960,320,900,320C840,320,780,320,720,320C660,320,600,320,540,320C480,320,420,320,360,320C300,320,240,320,180,320C120,320,60,320,30,320L0,320Z\"></path>\n      </svg>\n      <header className=\"App-header\">\n          <Grid\n            container\n            direction=\"column\"\n            justify=\"center\"\n            alignItems=\"center\"\n          >\n            {\n              posizione_in_data.map(\n                (righe, index) => \n                <Grid\n                  container\n                  direction=\"row\"\n                  justify=\"center\"\n                  alignItems=\"center\"\n                  xs={12}\n                >\n                  <Grid item><p style={{color:\"#000b76\", margin:\"1vw\"}}>{index + 1}</p></Grid>\n                    {\n                      righe.map(appa => <Grid item><div class=\"rectangle\"><span>{appa}</span></div></Grid>)\n                    }\n                  </Grid>\n                )\n            }\n          </Grid>\n    </header>\n    <footer style={{marginTop:\"20px\"}}>\n      <Grid \n        container\n        direction=\"row\"\n        justify=\"center\"\n        alignItems=\"center\"\n        xs={15}\n        spacing={3}\n      >\n        <Grid item><div class=\"albero\"/></Grid>\n        <Grid item><div class=\"albero\"/></Grid>\n        <Grid item><div class=\"albero\"/></Grid>\n        <Grid item><div class=\"albero\"/></Grid>\n      </Grid>\n      <Grid \n        container\n        direction=\"row\"\n        justify=\"left\"\n        alignItems=\"center\"\n        xs={15}\n        spacing={1}\n      >\n        <Grid item xs><p>_ _ _ _ _ _ _ _</p></Grid>\n        <Grid item xs><p style={{color:\"#676767\"}}>Giulio 2020</p></Grid>\n        <Grid item xs><p>_ _ _ _ _ _ _ _</p></Grid>\n      </Grid>\n    </footer>\n    </div>\n  );\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}